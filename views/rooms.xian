<section>
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-2xl font-bold">Rooms</h2>
    <button onclick="openModal('roomModal')" class="btn btn-primary">+ Add Room</button>
  </div>
  
  <!-- Filters -->
  <div class="bg-white rounded-xl shadow-sm p-4 mb-6">
    <div class="flex flex-wrap items-center gap-4">
      <div class="flex-1 min-w-64">
        <input 
          type="text" 
          placeholder="Search rooms..." 
          class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-highlight/40"
          id="roomSearch"
        />
      </div>
      
      <div class="flex items-center gap-2">
        <label class="text-sm font-medium text-gray-700">Building:</label>
        <select class="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-highlight/40" id="buildingFilter">
          <option value="">All Buildings</option>
          {{#each buildings}}
          <option value="{{this}}">{{this}}</option>
          {{/each}}
        </select>
      </div>
      
      <div class="flex items-center gap-2">
        <label class="text-sm font-medium text-gray-700">Availability:</label>
        <select class="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-highlight/40" id="availabilityFilter">
          <option value="">All Rooms</option>
          <option value="available">Available</option>
          <option value="occupied">Occupied</option>
        </select>
      </div>
    </div>
  </div>
  
  <!-- Rooms Table -->
  {{#if rooms}}
  <div class="bg-white rounded-xl shadow-sm overflow-hidden">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead class="bg-gray-50 border-b border-gray-200">
          <tr>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Room</th>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Building</th>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Capacity</th>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Availability</th>
            <th class="text-left px-6 py-3 text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200" id="roomsTableBody">
          {{#each rooms}}
          <tr class="hover:bg-gray-50 room-row" 
              data-building="{{this.buildingName}}" 
              data-availability="{{#if this.isAvailable}}available{{else}}occupied{{/if}}"
              data-name="{{this.name}}">
            <td class="px-6 py-4">
              <div>
                <div class="font-semibold text-gray-900">{{this.name}}</div>
                <div class="text-xs text-gray-500">Floor {{this.floor}}</div>
              </div>
            </td>
            <td class="px-6 py-4 text-sm text-gray-600">{{this.buildingName}}</td>
            <td class="px-6 py-4 text-sm text-gray-600">{{this.type}}</td>
            <td class="px-6 py-4 text-sm text-gray-600">{{this.capacity}} people</td>
            <td class="px-6 py-4">
              {{#if this.isAvailable}}
                <span class="badge badge-green">Available</span>
              {{else}}
                <span class="badge badge-red">Occupied</span>
              {{/if}}
            </td>
            <td class="px-6 py-4">
              <div class="flex items-center gap-2">
                <a href="/rooms/{{this.id}}" class="text-brand hover:text-brand-accent text-sm">View</a>
                <span class="text-gray-300">|</span>
                <button onclick="editRoom({{this.id}})" class="text-gray-500 hover:text-gray-700 text-sm">Edit</button>
                <span class="text-gray-300">|</span>
                <button onclick="deleteRoom({{this.id}})" class="text-red-500 hover:text-red-700 text-sm">Delete</button>
              </div>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </div>
  {{else}}
  <div class="bg-white rounded-xl shadow-sm p-8 text-center">
    <div class="text-gray-400 mb-4">
      <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z"></path>
      </svg>
    </div>
    <h3 class="text-lg font-medium text-gray-900 mb-2">No Rooms Found</h3>
    <p class="text-gray-500 mb-4">Get started by adding your first room.</p>
    <button onclick="openModal('roomModal')" class="btn btn-primary">+ Add First Room</button>
  </div>
  {{/if}}
</section>

<!-- Room Modal -->
{{> modal modalId="roomModal" title="Add New Room" subtitle="Enter the room information below" width="lg" showFooter=false}}

<!-- Delete Confirmation Modal -->
{{> modal modalId="deleteRoomModal" title="Delete Room" subtitle="Are you sure you want to delete this room?" width="md" showFooter=true submitText="Delete" }}

<script>
// Room filtering functionality
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('roomSearch');
  const buildingFilter = document.getElementById('buildingFilter');
  const availabilityFilter = document.getElementById('availabilityFilter');
  const roomRows = document.querySelectorAll('.room-row');
  
  function filterRooms() {
    const searchTerm = searchInput.value.toLowerCase();
    const selectedBuilding = buildingFilter.value;
    const selectedAvailability = availabilityFilter.value;
    
    roomRows.forEach(row => {
      const roomName = row.dataset.name.toLowerCase();
      const building = row.dataset.building;
      const availability = row.dataset.availability;
      
      const matchesSearch = roomName.includes(searchTerm);
      const matchesBuilding = !selectedBuilding || building === selectedBuilding;
      const matchesAvailability = !selectedAvailability || availability === selectedAvailability;
      
      if (matchesSearch && matchesBuilding && matchesAvailability) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }
  
  searchInput.addEventListener('input', filterRooms);
  buildingFilter.addEventListener('change', filterRooms);
  availabilityFilter.addEventListener('change', filterRooms);
  
  // Load room form content
  const roomModal = document.getElementById('roomModal');
  if (roomModal) {
    const contentSlot = roomModal.querySelector('.modal-content-slot');
    if (contentSlot) {
      contentSlot.innerHTML = `{{> forms/roomForm}}`;
    }
  }
  
  // Setup delete modal
  const deleteModal = document.getElementById('deleteRoomModal');
  if (deleteModal) {
    const contentSlot = deleteModal.querySelector('.modal-content-slot');
    if (contentSlot) {
      contentSlot.innerHTML = `
        <div class="text-center py-4">
          <div class="text-red-400 mb-4">
            <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <p class="text-gray-600">This action cannot be undone. The room and all associated schedules will be permanently deleted.</p>
        </div>
      `;
    }
  }
});

// Edit room function
function editRoom(roomId) {
  openModal('roomModal');
  
  // Update modal title
  const modalTitle = document.querySelector('#roomModal .modal-header h3');
  if (modalTitle) {
    modalTitle.textContent = 'Edit Room';
  }
}

// Delete room function
let roomToDelete = null;

function deleteRoom(roomId) {
  roomToDelete = roomId;
  openModal('deleteRoomModal');
}

// Handle delete confirmation
document.addEventListener('DOMContentLoaded', function() {
  const deleteForm = document.querySelector('#deleteRoomModal form');
  if (deleteForm) {
    deleteForm.addEventListener('submit', function(e) {
      e.preventDefault();
      if (roomToDelete) {
        alert(`Room ${roomToDelete} deleted successfully!`);
        closeModal('deleteRoomModal');
        // Refresh page to show updated data
        setTimeout(() => {
          window.location.reload();
        }, 500);
      }
    });
  }
});
</script>adcrumbs'}}
  [
    { "label": "Dashboard", "url": "/dashboard" },
    { "label": "Rooms", "url": "/rooms" }
  ]
{{/set}}
<section>
  <h2 class="text-2xl font-bold mb-6">Rooms</h2>
  <!-- TODO: Table view, filters, status badges -->
  <div class="bg-white rounded-xl shadow-sm p-6 text-gray-500 text-center">Room management UI coming soon.</div>
</section>